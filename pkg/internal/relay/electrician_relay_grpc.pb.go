// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/electrician_relay.proto

package relay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RelayService_Receive_FullMethodName       = "/electrician.RelayService/Receive"
	RelayService_StreamReceive_FullMethodName = "/electrician.RelayService/StreamReceive"
)

// RelayServiceClient is the client API for RelayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayServiceClient interface {
	Receive(ctx context.Context, in *WrappedPayload, opts ...grpc.CallOption) (*StreamAcknowledgment, error)
	StreamReceive(ctx context.Context, opts ...grpc.CallOption) (RelayService_StreamReceiveClient, error)
}

type relayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayServiceClient(cc grpc.ClientConnInterface) RelayServiceClient {
	return &relayServiceClient{cc}
}

func (c *relayServiceClient) Receive(ctx context.Context, in *WrappedPayload, opts ...grpc.CallOption) (*StreamAcknowledgment, error) {
	out := new(StreamAcknowledgment)
	err := c.cc.Invoke(ctx, RelayService_Receive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayServiceClient) StreamReceive(ctx context.Context, opts ...grpc.CallOption) (RelayService_StreamReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &RelayService_ServiceDesc.Streams[0], RelayService_StreamReceive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &relayServiceStreamReceiveClient{stream}
	return x, nil
}

type RelayService_StreamReceiveClient interface {
	Send(*WrappedPayload) error
	Recv() (*StreamAcknowledgment, error)
	grpc.ClientStream
}

type relayServiceStreamReceiveClient struct {
	grpc.ClientStream
}

func (x *relayServiceStreamReceiveClient) Send(m *WrappedPayload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *relayServiceStreamReceiveClient) Recv() (*StreamAcknowledgment, error) {
	m := new(StreamAcknowledgment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RelayServiceServer is the server API for RelayService service.
// All implementations must embed UnimplementedRelayServiceServer
// for forward compatibility
type RelayServiceServer interface {
	Receive(context.Context, *WrappedPayload) (*StreamAcknowledgment, error)
	StreamReceive(RelayService_StreamReceiveServer) error
	mustEmbedUnimplementedRelayServiceServer()
}

// UnimplementedRelayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelayServiceServer struct {
}

func (UnimplementedRelayServiceServer) Receive(context.Context, *WrappedPayload) (*StreamAcknowledgment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedRelayServiceServer) StreamReceive(RelayService_StreamReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReceive not implemented")
}
func (UnimplementedRelayServiceServer) mustEmbedUnimplementedRelayServiceServer() {}

// UnsafeRelayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayServiceServer will
// result in compilation errors.
type UnsafeRelayServiceServer interface {
	mustEmbedUnimplementedRelayServiceServer()
}

func RegisterRelayServiceServer(s grpc.ServiceRegistrar, srv RelayServiceServer) {
	s.RegisterService(&RelayService_ServiceDesc, srv)
}

func _RelayService_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WrappedPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServiceServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayService_Receive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServiceServer).Receive(ctx, req.(*WrappedPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayService_StreamReceive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RelayServiceServer).StreamReceive(&relayServiceStreamReceiveServer{stream})
}

type RelayService_StreamReceiveServer interface {
	Send(*StreamAcknowledgment) error
	Recv() (*WrappedPayload, error)
	grpc.ServerStream
}

type relayServiceStreamReceiveServer struct {
	grpc.ServerStream
}

func (x *relayServiceStreamReceiveServer) Send(m *StreamAcknowledgment) error {
	return x.ServerStream.SendMsg(m)
}

func (x *relayServiceStreamReceiveServer) Recv() (*WrappedPayload, error) {
	m := new(WrappedPayload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RelayService_ServiceDesc is the grpc.ServiceDesc for RelayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "electrician.RelayService",
	HandlerType: (*RelayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _RelayService_Receive_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReceive",
			Handler:       _RelayService_StreamReceive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/electrician_relay.proto",
}
